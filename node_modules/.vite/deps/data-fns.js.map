{
  "version": 3,
  "sources": ["../../data-fns/src/lib/getItemCyclic.ts", "../../data-fns/src/lib/offset.ts", "../../data-fns/src/lib/patternChunks.ts", "../../data-fns/src/lib/replaceAt.ts", "../../data-fns/src/lib/times.ts"],
  "sourcesContent": ["export const getItemCyclic = <T>(index: number, array: Array<T>): T => {\n  const id = index % array.length\n  return array[id]\n}\n", "export const offset = <T extends Array<any>>(list: T, amount: number): T => {\n  return [...list.slice(amount), ...list.slice(0, amount)] as T\n}\n", "import { getItemCyclic } from './getItemCyclic'\n\nexport const patternChunks = <T>(array: Array<T>, pattern: Array<number>): Array<Array<T>> => {\n  const result: Array<Array<T>> = []\n  const _array = [...array]\n  let i = 0\n\n  while (_array.length > 0) {\n    result.push(_array.splice(0, getItemCyclic(i, pattern)))\n    i++\n  }\n\n  return result\n}\n", "export const replaceAt = <A>(\n  array: Array<A>,\n  index: number,\n  replacementFn: (item: A) => A\n): Array<A> => {\n  const item = array[index]\n\n  return array\n    .slice(0, index)\n    .concat([replacementFn(item)])\n    .concat(array.slice(index + 1))\n}\n", "export const times = <T>(iterations: number, callback: (index: number) => T): Array<T> => {\n  let result: Array<T> = []\n  \n  for (let i=0; i < iterations; i++) {\n      result.push(callback(i));\n  }\n  \n  return result\n}"],
  "mappings": ";;;IAAa,gBAAgB,wBAAI,OAAe,OAAnB;AAC3B,MAAM,KAAK,QAAQ,MAAM;AACzB,SAAO,MAAM;AACd;ICHY,SAAS,iBAAuB,MAAS,QAAhC;AACpB,SAAA,CAAA,EAAA,OAAW,KAAK,MAAM,MAAX,GAAuB,KAAK,MAAM,GAAG,MAAd,CAAlC;AACD;ICAY,gBAAgB,wBAAI,OAAiB,SAArB;AAC3B,MAAM,SAA0B,CAAA;AAChC,MAAM,SAAM,CAAA,EAAA,OAAO,KAAP;AACZ,MAAI,IAAI;AAER,SAAO,OAAO,SAAS,GAAG;AACxB,WAAO,KAAK,OAAO,OAAO,GAAG,cAAc,GAAG,OAAJ,CAA9B,CAAZ;AACA;EACD;AAED,SAAO;AACR;ICbY,YAAY,oBACvB,OACA,OACA,eAHuB;AAKvB,MAAM,OAAO,MAAM;AAEnB,SAAO,MACJ,MAAM,GAAG,KADL,EAEJ,OAAO,CAAC,cAAc,IAAD,CAAd,CAFH,EAGJ,OAAO,MAAM,MAAM,QAAQ,CAApB,CAHH;AAIR;ICXY,QAAQ,gBAAI,YAAoB,UAAxB;AACnB,MAAI,SAAmB,CAAA;AAEvB,WAAS,IAAE,GAAG,IAAI,YAAY,KAAK;AAC/B,WAAO,KAAK,SAAS,CAAD,CAApB;EACH;AAED,SAAO;AACR;",
  "names": []
}
