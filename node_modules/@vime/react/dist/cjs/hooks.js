"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePlayerContext = exports.usePlayer = void 0;
var react_1 = require("react");
var core_1 = require("@vime/core");
var noop = function () { };
/**
 * Returns the closest ancestor player to the given `ref`.
 */
var usePlayer = function (ref) {
    var _a = (0, react_1.useState)(null), player = _a[0], setPlayer = _a[1];
    (0, react_1.useLayoutEffect)(function () {
        function find() {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _b = setPlayer;
                            if (!ref.current) return [3 /*break*/, 2];
                            return [4 /*yield*/, (0, core_1.findPlayer)(ref.current)];
                        case 1:
                            _c = (_a = (_d.sent())) !== null && _a !== void 0 ? _a : null;
                            return [3 /*break*/, 3];
                        case 2:
                            _c = null;
                            _d.label = 3;
                        case 3:
                            _b.apply(void 0, [_c]);
                            return [2 /*return*/];
                    }
                });
            });
        }
        find();
    }, [ref.current]);
    return player;
};
exports.usePlayer = usePlayer;
/**
 * Binds the given `prop` to the closest ancestor player of the given `ref`. When the property
 * changes on the player, this hook will trigger a re-render with the new value.
 *
 * @param ref The ref to start searching from.
 * @param prop The property to bind to.
 * @param defaultValue The initial value of the property until the the player context is bound.
 */
var usePlayerContext = function (ref, prop, defaultValue) {
    var _a = (0, react_1.useState)(defaultValue), value = _a[0], setValue = _a[1];
    var dispatch = (0, react_1.useCallback)(ref.current === null ? noop : (0, core_1.createDispatcher)(ref.current), [ref.current]);
    var setter = (0, react_1.useCallback)(
    // eslint-disable-next-line @typescript-eslint/no-shadow
    function (value) {
        dispatch(prop, value);
    }, [dispatch, prop]);
    (0, react_1.useLayoutEffect)(function () {
        if (ref.current === null)
            return undefined;
        var cleanup;
        function connect() {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, core_1.usePlayerContext)(ref.current, [prop], function (_, newValue) {
                                setValue(newValue);
                            })];
                        case 1:
                            cleanup = _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        }
        connect();
        return function () {
            cleanup === null || cleanup === void 0 ? void 0 : cleanup();
        };
    }, [ref.current, prop]);
    return [value, setter];
};
exports.usePlayerContext = usePlayerContext;
//# sourceMappingURL=hooks.js.map